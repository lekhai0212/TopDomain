//
//  AppDelegate.m
//  NhanHoa
//
//  Created by lam quang quan on 4/23/19.
//  Copyright Â© 2019 Nhan Hoa. All rights reserved.
//

#import "AppDelegate.h"
#import "AppTabbarViewController.h"
#import "SignInViewController.h"
#import "CartModel.h"
#import <AVFoundation/AVAudioPlayer.h>
#import "JSONKit.h"

@import Firebase;

#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)

@interface AppDelegate ()

@end

@implementation AppDelegate
@synthesize errorStyle, warningStyle, successStyle;
@synthesize hStatusBar, hNav, userInfo, internetReachable, internetActive, listCity, listNumber;
@synthesize fontBold, fontMedium, fontRegular, fontItalic, fontThin, fontDesc, fontNormal, fontMediumDesc, hTextfield, radius, fontBTN, fontItalicDesc;
@synthesize needReloadListProfile, profileEdit, editCMND_a, editCMND_b, editBanKhai, domainsPrice, registerAccSuccess, registerAccount;
@synthesize cropAvatar, dataCrop, token, hashKey;
@synthesize cartWindow, cartViewController, cartNavViewController, listBank, cartView, errorMsgDict, listPricingQT, listPricingVN, notiAudio, getInfoTimer, countLogin;
@synthesize newHomeLayout;
@synthesize needChangeDNS;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    //  hide title of back bar title
    
    [FIRApp configure];
    [FIRMessaging messaging].delegate = self;
    
    if ([UNUserNotificationCenter class] != nil) {
        // iOS 10 or later
        // For iOS 10 display notification (sent via APNS)
        [[UNUserNotificationCenter currentNotificationCenter] removeAllDeliveredNotifications];
        
        [UNUserNotificationCenter currentNotificationCenter].delegate = self;
        UNAuthorizationOptions authOptions = UNAuthorizationOptionAlert | UNAuthorizationOptionSound | UNAuthorizationOptionBadge;
        [[UNUserNotificationCenter currentNotificationCenter] requestAuthorizationWithOptions:authOptions completionHandler:^(BOOL granted, NSError * _Nullable error) {
             // ...
         }];
    } else {
        // iOS 10 notifications aren't available; fall back to iOS 8-9 notifications.
        UIUserNotificationType allNotificationTypes = (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);
        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];
        [application registerUserNotificationSettings:settings];
    }
    [application registerForRemoteNotifications];
    
    [self setupFontForApp];
    
    //  Register remote notifications
    if(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"10.0")){
        UNUserNotificationCenter *notifiCenter = [UNUserNotificationCenter currentNotificationCenter];
        notifiCenter.delegate = self;
        [notifiCenter requestAuthorizationWithOptions:(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge) completionHandler:^(BOOL granted, NSError * _Nullable error){
            if( !error ){
                dispatch_async(dispatch_get_main_queue(), ^{
                    [[UIApplication sharedApplication] registerForRemoteNotifications];
                });
            }
        }];
    }
    
    if ([[UIApplication sharedApplication] respondsToSelector:@selector(registerForRemoteNotifications)])
    {
        UIUserNotificationType types = UIUserNotificationTypeBadge | UIUserNotificationTypeSound | UIUserNotificationTypeAlert;
        UIUserNotificationSettings *mySettings = [UIUserNotificationSettings settingsForTypes:types categories:nil];
        
        [[UIApplication sharedApplication] registerUserNotificationSettings:mySettings];
        [[UIApplication sharedApplication] registerForRemoteNotifications];
    } else {
        UIRemoteNotificationType types = UIUserNotificationTypeBadge | UIUserNotificationTypeSound | UIUserNotificationTypeAlert;
        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:types];
    }
    
    //  setup logs folder
    newHomeLayout = FALSE;
    
    [self setupForWriteLogFileForApp];
    [AppUtils createDirectoryAndSubDirectory:@"avatars"];
    [self createErrorMessagesInfo];
    
    NSString *version = [AppUtils getAppVersionWithBuildVersion: TRUE];
    [WriteLogsUtils writeLogContent:[NSString stringWithFormat:@"==================================================\n==               START APPLICATION VERSION (%@)             ==\n==================================================", version]];
    
    //  custom tabbar & navigation bar
    hStatusBar = application.statusBarFrame.size.height;
    [self enableSizeForBarButtonItem: FALSE];
    
    UINavigationBar.appearance.barTintColor = NAV_COLOR;
    UINavigationBar.appearance.tintColor = UIColor.whiteColor;
    UINavigationBar.appearance.translucent = NO;
    
    UINavigationBar.appearance.titleTextAttributes = [NSDictionary dictionaryWithObjectsAndKeys:[UIFont fontWithName:RobotoRegular size:18.0], NSFontAttributeName, UIColor.whiteColor, NSForegroundColorAttributeName, nil];
    
    listNumber = [[NSArray alloc] initWithObjects: @"+", @"0", @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", nil];
    
    //  setup message style
    warningStyle = [[CSToastStyle alloc] initWithDefaultStyle];
    warningStyle.backgroundColor = ORANGE_COLOR;
    warningStyle.messageColor = UIColor.whiteColor;
    warningStyle.messageFont = [UIFont fontWithName:RobotoRegular size:18.0];
    warningStyle.cornerRadius = 20.0;
    warningStyle.messageAlignment = NSTextAlignmentCenter;
    warningStyle.messageNumberOfLines = 5;
    warningStyle.shadowColor = UIColor.blackColor;
    warningStyle.shadowOpacity = 1.0;
    warningStyle.shadowOffset = CGSizeMake(-5, -5);
    
    errorStyle = [[CSToastStyle alloc] initWithDefaultStyle];
    errorStyle.backgroundColor = [UIColor colorWithRed:(211/255.0) green:(55/255.0) blue:(55/255.0) alpha:1.0];
    errorStyle.messageColor = UIColor.whiteColor;
    errorStyle.messageFont = [UIFont fontWithName:RobotoRegular size:18.0];
    errorStyle.cornerRadius = 20.0;
    errorStyle.messageAlignment = NSTextAlignmentCenter;
    errorStyle.messageNumberOfLines = 5;
    errorStyle.shadowColor = UIColor.blackColor;
    errorStyle.shadowOpacity = 1.0;
    errorStyle.shadowOffset = CGSizeMake(-5, -5);
    
    successStyle = [[CSToastStyle alloc] initWithDefaultStyle];
    successStyle.backgroundColor = BLUE_COLOR;
    successStyle.messageColor = UIColor.whiteColor;
    successStyle.messageFont = [UIFont fontWithName:RobotoRegular size:18.0];
    successStyle.cornerRadius = 20.0;
    successStyle.messageAlignment = NSTextAlignmentCenter;
    successStyle.messageNumberOfLines = 5;
    successStyle.shadowColor = UIColor.blackColor;
    successStyle.shadowOpacity = 1.0;
    successStyle.shadowOffset = CGSizeMake(-5, -5);
    
    
    [self createListCity];
    
    self.window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds];
    
    [[UITabBar appearance] setBackgroundImage:[UIImage imageNamed:@"fondoTabBar"]];
    [UITabBar appearance].layer.borderWidth = 0.0f;
    [UITabBar appearance].clipsToBounds = true;
    
    //  status network
    internetReachable = [Reachability reachabilityForInternetConnection];
    [internetReachable startNotifier];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(checkNetworkStatus:)
                                                 name:kReachabilityChangedNotification object:nil];
    
    NSString *loginState = [[NSUserDefaults standardUserDefaults] objectForKey:login_state];
    if (loginState == nil || [loginState isEqualToString:@"NO"]) {
        [self showStartLoginView];
        
    }else{
        SignInViewController *signInVC = [[SignInViewController alloc] initWithNibName:@"SignInViewController" bundle:nil];
        UINavigationController *signInNav = [[UINavigationController alloc] initWithRootViewController:signInVC];
        
        [self.window setRootViewController:signInNav];
        [self.window makeKeyAndVisible];
    }
    // Override point for customization after application launch.
    
    if (self.cartWindow == nil) {
        //  self.cartWindow = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
        self.cartWindow = [[UIWindow alloc] initWithFrame:CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT)];
        self.cartWindow.backgroundColor = UIColor.whiteColor;;
        self.cartWindow.windowLevel = UIWindowLevelNormal;
        self.cartWindow.tag = 2;
    }
    
    if (self.cartViewController == nil) {
        self.cartViewController = [[CartViewController alloc] initWithNibName:@"CartViewController" bundle:nil];
        self.cartNavViewController = [[UINavigationController alloc] initWithRootViewController:self.cartViewController];
        self.cartNavViewController.navigationBarHidden = YES;
    }
    cartWindow.rootViewController = cartNavViewController;
    cartWindow.alpha = 0;
    
    //  setup for Fabric
    [Fabric with:@[[Crashlytics class]]];
    
    return YES;
}


- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber: 0];
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
//    NSCharacterSet *removestring = [NSCharacterSet characterSetWithCharactersInString:@"<> "];
//    callToken = [[[NSString stringWithFormat:@"%@", deviceToken] componentsSeparatedByCharactersInSet: removestring] componentsJoinedByString: @""];
//
//    [WriteLogsUtils writeLogContent:[NSString stringWithFormat:@"GETTED TOKEN FOR APP: %@", callToken]];
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    [WriteLogsUtils writeLogContent:[NSString stringWithFormat:@">>>>>ERROR<<<<< CAN NOT GET TOKEN FOR APP: %@", error.localizedDescription]];
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    
    
}


- (void) userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler
{
    completionHandler(UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionAlert);
    if ([UIApplication sharedApplication].applicationState == UIApplicationStateActive) {
        if (notiAudio == nil) {
            notiAudio = [[AudioSessionUtils alloc] init];
        }
        [notiAudio playNotificationTone];
    }
}

-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler
{
    
}

+(AppDelegate *)sharedInstance{
    return ((AppDelegate*) [[UIApplication sharedApplication] delegate]);
}

- (void)showStartLoginView {
    LaunchViewController *launchVC = [[LaunchViewController alloc] initWithNibName:@"LaunchViewController" bundle:nil];
    UINavigationController *launchNav = [[UINavigationController alloc] initWithRootViewController:launchVC];
    
    [self.window setRootViewController:launchNav];
    [self.window makeKeyAndVisible];
}

- (void)checkNetworkStatus:(NSNotification *)notice
{
    // called after network status changes
    NetworkStatus internetStatus = [internetReachable currentReachabilityStatus];
    [WriteLogsUtils writeLogContent:[NSString stringWithFormat:@"\n[%s] Network status is %d", __FUNCTION__, internetStatus]];
    
    switch (internetStatus){
        case NotReachable: {
            internetActive = NO;
            break;
        }
        case ReachableViaWiFi: {
            internetActive = YES;
            break;
        }
        case ReachableViaWWAN: {
            internetActive = YES;
            
            break;
        }
    }
}

- (void)createListCity {
    listCity = [[NSMutableArray alloc] init];
    
    CityObject *city1 = [[CityObject alloc] initWithCode:@"1" name:@"Há» ChÃ­ Minh"];
    [listCity addObject: city1];
    
    CityObject *city2 = [[CityObject alloc] initWithCode:@"2" name:@"HÃ  Ná»i"];
    [listCity addObject: city2];
    
    CityObject *city3 = [[CityObject alloc] initWithCode:@"3" name:@"An Giang"];
    [listCity addObject: city3];
    
    CityObject *city4 = [[CityObject alloc] initWithCode:@"4" name:@"Báº¡c LiÃªu"];
    [listCity addObject: city4];
    
    CityObject *city5 = [[CityObject alloc] initWithCode:@"5" name:@"BÃ  Rá»a - VÅ©ng TÃ u"];
    [listCity addObject: city5];
    
    CityObject *city6 = [[CityObject alloc] initWithCode:@"6" name:@"Báº¯c Káº¡n"];
    [listCity addObject: city6];
    
    CityObject *city7 = [[CityObject alloc] initWithCode:@"7" name:@"Báº¯c Giang"];
    [listCity addObject: city7];
    
    CityObject *city8 = [[CityObject alloc] initWithCode:@"8" name:@"Báº¯c Ninh"];
    [listCity addObject: city8];
    
    CityObject *city9 = [[CityObject alloc] initWithCode:@"9" name:@"Báº¿n Tre"];
    [listCity addObject: city9];
    
    CityObject *city10 = [[CityObject alloc] initWithCode:@"10" name:@"BÃ¬nh DÆ°Æ¡ng"];
    [listCity addObject: city10];
    
    CityObject *city11 = [[CityObject alloc] initWithCode:@"11" name:@"BÃ¬nh Äá»nh"];
    [listCity addObject: city11];
    
    CityObject *city12 = [[CityObject alloc] initWithCode:@"12" name:@"BÃ¬nh PhÆ°á»c"];
    [listCity addObject: city12];
    
    CityObject *city13 = [[CityObject alloc] initWithCode:@"13" name:@"BÃ¬nh Thuáº­n"];
    [listCity addObject: city13];
    
    CityObject *city14 = [[CityObject alloc] initWithCode:@"14" name:@"Cao Báº±ng"];
    [listCity addObject: city14];
    
    CityObject *city15 = [[CityObject alloc] initWithCode:@"15" name:@"CÃ  Mau"];
    [listCity addObject: city15];
    
    CityObject *city16 = [[CityObject alloc] initWithCode:@"16" name:@"Cáº§n ThÆ¡"];
    [listCity addObject: city16];
    
    CityObject *city17 = [[CityObject alloc] initWithCode:@"17" name:@"ÄÃ  Náºµng"];
    [listCity addObject: city17];
    
    CityObject *city18 = [[CityObject alloc] initWithCode:@"18" name:@"Äáº¯k Láº¯k"];
    [listCity addObject: city18];
    
    CityObject *city19 = [[CityObject alloc] initWithCode:@"19" name:@"Äá»ng Nai"];
    [listCity addObject: city19];
    
    CityObject *city20 = [[CityObject alloc] initWithCode:@"20" name:@"Äá»ng ThÃ¡p"];
    [listCity addObject: city20];
    
    CityObject *city21 = [[CityObject alloc] initWithCode:@"21" name:@"HÃ  Giang"];
    [listCity addObject: city21];
    
    CityObject *city23 = [[CityObject alloc] initWithCode:@"23" name:@"HÃ  Nam"];
    [listCity addObject: city23];
    
    CityObject *city24 = [[CityObject alloc] initWithCode:@"24" name:@"HÃ  TÃ¢y"];
    [listCity addObject: city24];
    
    CityObject *city25 = [[CityObject alloc] initWithCode:@"25" name:@"HÃ  TÄ©nh"];
    [listCity addObject: city25];
    
    CityObject *city26 = [[CityObject alloc] initWithCode:@"26" name:@"Háº£i DÆ°Æ¡ng"];
    [listCity addObject: city26];
    
    CityObject *city27 = [[CityObject alloc] initWithCode:@"27" name:@"Háº£i PhÃ²ng"];
    [listCity addObject: city27];
    
    CityObject *city28 = [[CityObject alloc] initWithCode:@"28" name:@"HÃ²a BÃ¬nh"];
    [listCity addObject: city28];
    
    CityObject *city29 = [[CityObject alloc] initWithCode:@"29" name:@"HÆ°ng YÃªn"];
    [listCity addObject: city29];
    
    CityObject *city30 = [[CityObject alloc] initWithCode:@"30" name:@"KhÃ¡nh HÃ²a"];
    [listCity addObject: city30];
    
    CityObject *city31 = [[CityObject alloc] initWithCode:@"31" name:@"KiÃªn Giang"];
    [listCity addObject: city31];
    
    CityObject *city32 = [[CityObject alloc] initWithCode:@"32" name:@"Kon Tum"];
    [listCity addObject: city32];
    
    CityObject *city33 = [[CityObject alloc] initWithCode:@"33" name:@"Lai ChÃ¢u"];
    [listCity addObject: city33];
    
    CityObject *city34 = [[CityObject alloc] initWithCode:@"34" name:@"Láº¡ng SÆ¡n"];
    [listCity addObject: city34];
    
    CityObject *city35 = [[CityObject alloc] initWithCode:@"35" name:@"LÃ o Cai"];
    [listCity addObject: city35];
    
    CityObject *city36 = [[CityObject alloc] initWithCode:@"36" name:@"LÃ¢m Äá»ng"];
    [listCity addObject: city36];
    
    CityObject *city37 = [[CityObject alloc] initWithCode:@"37" name:@"Long An"];
    [listCity addObject: city37];
    
    CityObject *city38 = [[CityObject alloc] initWithCode:@"38" name:@"Nam Äá»nh"];
    [listCity addObject: city38];
    
    CityObject *city39 = [[CityObject alloc] initWithCode:@"39" name:@"Nghá» An"];
    [listCity addObject: city39];
    
    CityObject *city40 = [[CityObject alloc] initWithCode:@"40" name:@"Ninh BÃ¬nh"];
    [listCity addObject: city40];
    
    CityObject *city41 = [[CityObject alloc] initWithCode:@"41" name:@"Ninh Thuáº­n"];
    [listCity addObject: city41];
    
    CityObject *city42 = [[CityObject alloc] initWithCode:@"42" name:@"PhÃº Thá»"];
    [listCity addObject: city42];
    
    CityObject *city43 = [[CityObject alloc] initWithCode:@"43" name:@"PhÃº YÃªn"];
    [listCity addObject: city43];
    
    CityObject *city44 = [[CityObject alloc] initWithCode:@"44" name:@"Quáº£ng BÃ¬nh"];
    [listCity addObject: city44];
    
    CityObject *city45 = [[CityObject alloc] initWithCode:@"45" name:@"Quáº£ng Nam"];
    [listCity addObject: city45];
    
    CityObject *city46 = [[CityObject alloc] initWithCode:@"46" name:@"Quáº£ng NgÃ£i"];
    [listCity addObject: city46];
    
    CityObject *city47 = [[CityObject alloc] initWithCode:@"47" name:@"Quáº£ng Ninh"];
    [listCity addObject: city47];
    
    CityObject *city48 = [[CityObject alloc] initWithCode:@"48" name:@"Quáº£ng Trá»"];
    [listCity addObject: city48];
    
    CityObject *city49 = [[CityObject alloc] initWithCode:@"49" name:@"SÃ³c TrÄng"];
    [listCity addObject: city49];
    
    CityObject *city50 = [[CityObject alloc] initWithCode:@"50" name:@"SÆ¡n La"];
    [listCity addObject: city50];
    
    CityObject *city51 = [[CityObject alloc] initWithCode:@"51" name:@"TÃ¢y Ninh"];
    [listCity addObject: city51];
    
    CityObject *city52 = [[CityObject alloc] initWithCode:@"52" name:@"ThÃ¡i BÃ¬nh"];
    [listCity addObject: city52];
    
    CityObject *city53 = [[CityObject alloc] initWithCode:@"53" name:@"ThÃ¡i NguyÃªn"];
    [listCity addObject: city53];
    
    CityObject *city54 = [[CityObject alloc] initWithCode:@"54" name:@"Thanh HÃ³a"];
    [listCity addObject: city54];
    
    CityObject *city55 = [[CityObject alloc] initWithCode:@"55" name:@"Thá»«a ThiÃªn Huáº¿"];
    [listCity addObject: city55];
    
    CityObject *city56 = [[CityObject alloc] initWithCode:@"56" name:@"Tiá»n Giang"];
    [listCity addObject: city56];
    
    CityObject *city57 = [[CityObject alloc] initWithCode:@"57" name:@"TrÃ  Vinh"];
    [listCity addObject: city57];
    
    CityObject *city58 = [[CityObject alloc] initWithCode:@"58" name:@"TuyÃªn Quang"];
    [listCity addObject: city58];
    
    CityObject *city59 = [[CityObject alloc] initWithCode:@"59" name:@"VÄ©nh Long"];
    [listCity addObject: city59];
    
    CityObject *city60 = [[CityObject alloc] initWithCode:@"60" name:@"VÄ©nh PhÃºc"];
    [listCity addObject: city60];
    
    CityObject *city61 = [[CityObject alloc] initWithCode:@"YÃªn BÃ¡i" name:@"YÃªn BÃ¡i"];
    [listCity addObject: city61];
    
    CityObject *city62 = [[CityObject alloc] initWithCode:@"62" name:@"Äáº¯k NÃ´ng"];
    [listCity addObject: city62];
    
    CityObject *city63 = [[CityObject alloc] initWithCode:@"63" name:@"Gia Lai"];
    [listCity addObject: city63];
    
    CityObject *city64 = [[CityObject alloc] initWithCode:@"64" name:@"Äiá»n BiÃªn"];
    [listCity addObject: city64];
    
    CityObject *city65 = [[CityObject alloc] initWithCode:@"65" name:@"Háº­u Giang"];
    [listCity addObject: city65];
    
    CityObject *city66 = [[CityObject alloc] initWithCode:@"66" name:@"BuÃ´n Ma Thuá»t"];
    [listCity addObject: city66];
    
    CityObject *city67 = [[CityObject alloc] initWithCode:@"67" name:@"Crimmitschau"];
    [listCity addObject: city67];
}

- (void)enableSizeForBarButtonItem: (BOOL)enable {
    float fontSize = 0.1;
    if (enable) {
        fontSize = 18.0;
    }
    NSDictionary *titleInfo = [NSDictionary dictionaryWithObjectsAndKeys:[UIFont fontWithName:RobotoRegular size:fontSize], NSFontAttributeName, UIColor.whiteColor, NSForegroundColorAttributeName, nil];
    [UIBarButtonItem.appearance setTitleTextAttributes:titleInfo forState:UIControlStateNormal];
    [UIBarButtonItem.appearance setTitleTextAttributes:titleInfo forState:UIControlStateHighlighted];
}

- (void)setupFontForApp {
    radius = 5.0;
    
    NSString *deviceMode = [DeviceUtils getModelsOfCurrentDevice];
    if ([deviceMode isEqualToString: Iphone5_1] || [deviceMode isEqualToString: Iphone5_2] || [deviceMode isEqualToString: Iphone5c_1] || [deviceMode isEqualToString: Iphone5c_2] || [deviceMode isEqualToString: Iphone5s_1] || [deviceMode isEqualToString: Iphone5s_2] || [deviceMode isEqualToString: IphoneSE])
    {
        //  Screen width: 320.000000 - Screen height: 667.000000
        fontBold = [UIFont fontWithName:RobotoBold size:16.0];
        fontMedium = [UIFont fontWithName:RobotoMedium size:16.0];
        fontRegular = [UIFont fontWithName:RobotoRegular size:16.0];
        fontDesc = [UIFont fontWithName:RobotoRegular size:14.0];
        fontBTN = [UIFont fontWithName:RobotoRegular size:18.0];
        fontItalic = [UIFont fontWithName:RobotoItalic size:16.0];
        
        fontNormal = [UIFont fontWithName:RobotoRegular size:15.0];
        fontItalicDesc = [UIFont fontWithName:RobotoItalic size:15.0];
        fontMediumDesc = [UIFont fontWithName:RobotoMedium size:15.0];
        
        hTextfield = 35.0;
        
    }else if ([deviceMode isEqualToString: Iphone6] || [deviceMode isEqualToString: Iphone6s] || [deviceMode isEqualToString: Iphone7_1] || [deviceMode isEqualToString: Iphone7_2] || [deviceMode isEqualToString: Iphone8_1] || [deviceMode isEqualToString: Iphone8_2] || [deviceMode isEqualToString: simulator])
    {
        //  Screen width: 375.000000 - Screen height: 667.000000
        fontBold = [UIFont fontWithName:RobotoBold size:16.0];
        fontMedium = [UIFont fontWithName:RobotoMedium size:16.0];
        fontRegular = [UIFont fontWithName:RobotoRegular size:16.0];
        fontDesc = [UIFont fontWithName:RobotoRegular size:14.0];
        fontBTN = [UIFont fontWithName:RobotoRegular size:18.0];
        fontItalic = [UIFont fontWithName:RobotoItalic size:16.0];
        
        fontNormal = [UIFont fontWithName:RobotoRegular size:15.0];
        fontItalicDesc = [UIFont fontWithName:RobotoItalic size:15.0];
        fontMediumDesc = [UIFont fontWithName:RobotoMedium size:15.0];
        
        hTextfield = 38.0;
        
    }else if ([deviceMode isEqualToString: Iphone6_Plus] || [deviceMode isEqualToString: Iphone6s_Plus] || [deviceMode isEqualToString: Iphone7_Plus1] || [deviceMode isEqualToString: Iphone7_Plus2] || [deviceMode isEqualToString: Iphone8_Plus1] || [deviceMode isEqualToString: Iphone8_Plus2])
    {
        //  Screen width: 414.000000 - Screen height: 736.000000
        fontBold = [UIFont fontWithName:RobotoBold size:18.0];
        fontMedium = [UIFont fontWithName:RobotoMedium size:18.0];
        fontRegular = [UIFont fontWithName:RobotoRegular size:18.0];
        fontDesc = [UIFont fontWithName:RobotoRegular size:16.0];
        fontBTN = [UIFont fontWithName:RobotoRegular size:20.0];
        fontItalic = [UIFont fontWithName:RobotoItalic size:18.0];
        
        fontNormal = [UIFont fontWithName:RobotoRegular size:16.0];
        fontItalicDesc = [UIFont fontWithName:RobotoItalic size:16.0];
        fontMediumDesc = [UIFont fontWithName:RobotoMedium size:16.0];
        
        hTextfield = 40.0;
        
    }else if ([deviceMode isEqualToString: IphoneX_1] || [deviceMode isEqualToString: IphoneX_2] || [deviceMode isEqualToString: IphoneXR] || [deviceMode isEqualToString: IphoneXS] || [deviceMode isEqualToString: IphoneXS_Max1] || [deviceMode isEqualToString: IphoneXS_Max2]){
        //  Screen width: 375.000000 - Screen height: 812.000000
        fontBold = [UIFont fontWithName:RobotoBold size:18.0];
        fontMedium = [UIFont fontWithName:RobotoMedium size:18.0];
        fontRegular = [UIFont fontWithName:RobotoRegular size:18.0];
        fontDesc = [UIFont fontWithName:RobotoRegular size:16.0];
        fontBTN = [UIFont fontWithName:RobotoRegular size:20.0];
        fontItalic = [UIFont fontWithName:RobotoItalic size:18.0];
        
        fontNormal = [UIFont fontWithName:RobotoRegular size:16.0];
        fontItalicDesc = [UIFont fontWithName:RobotoItalic size:16.0];
        fontMediumDesc = [UIFont fontWithName:RobotoMedium size:16.0];
        
        hTextfield = 40.0;
        
    }else{
        fontBold = [UIFont fontWithName:RobotoRegular size:16.0];
        fontMedium = [UIFont fontWithName:RobotoMedium size:16.0];
        fontRegular = [UIFont fontWithName:RobotoRegular size:16.0];
        fontDesc = [UIFont fontWithName:RobotoRegular size:14.0];
        fontBTN = [UIFont fontWithName:RobotoRegular size:18.0];
        fontItalic = [UIFont fontWithName:RobotoItalic size:16.0];
        
        fontNormal = [UIFont fontWithName:RobotoRegular size:15.0];
        fontItalicDesc = [UIFont fontWithName:RobotoItalic size:15.0];
        fontMediumDesc = [UIFont fontWithName:RobotoMedium size:15.0];
        
        hTextfield = 38.0;
    }
}

- (NSString *)findCityObjectWithCityCode: (NSString *)code {
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"code = %@", code];
    NSArray *filter = [listCity filteredArrayUsingPredicate: predicate];
    if (filter.count > 0) {
        CityObject *result = [filter firstObject];
        return result.name;
    }
    return @"";
}

- (void)updateShoppingCartCount {
    if ([[CartModel getInstance] countItemInCart] == 0) {
        self.cartView.lbCount.hidden = TRUE;
    }else{
        self.cartView.lbCount.hidden = FALSE;
        self.cartView.lbCount.text = [NSString stringWithFormat:@"%d", [[CartModel getInstance] countItemInCart]];
    }
}

- (void)showCartScreenContent
{
    if (self.cartWindow == nil) {
        //  self.cartWindow = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
        self.cartWindow = [[UIWindow alloc] initWithFrame:CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT)];
        self.cartWindow.backgroundColor = UIColor.redColor;
        self.cartWindow.windowLevel = UIWindowLevelNormal;
        self.cartWindow.tag = 2;
    }
    if (self.cartViewController == nil) {
        self.cartViewController = [[CartViewController alloc] initWithNibName:@"CartViewController" bundle:nil];
        self.cartNavViewController = [[UINavigationController alloc] initWithRootViewController:self.cartViewController];
        self.cartNavViewController.navigationBarHidden = YES;
    }
    [ProgressHUD updateCurrentWindowWithNewWindow: self.cartWindow];
    cartWindow.rootViewController = cartNavViewController;
    cartWindow.alpha = 0;
    
    [UIView animateWithDuration:0.2 animations:^{
        self.cartWindow.frame = CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
        self.cartWindow.alpha = 1;
        [self.cartWindow makeKeyAndVisible];
    }completion:^(BOOL finished) {
        
    }];
    
    //  SF(@"iOS_%@_%@",bundleIdentifier,version)
}

- (void)hideCartView {
    [ProgressHUD updateCurrentWindowWithNewWindow: self.window];
    if( [self.cartWindow isKeyWindow] ) {
        
        [UIView animateWithDuration:0.0 animations:^{
            self.cartWindow.alpha = 0;
        } completion:^(BOOL finished) {
            if (self.cartViewController != nil) {
                [self.cartViewController.view removeFromSuperview];
                self.cartViewController = nil;
            }
            
            if (self.cartNavViewController != nil) {
                [self.cartNavViewController.view removeFromSuperview];
                self.cartNavViewController = nil;
            }
            [self.cartWindow removeFromSuperview];
            [self.window makeKeyAndVisible];
        }];
        
        [[NSNotificationCenter defaultCenter] postNotificationName:@"reloadChoosedDomainList" object:nil];
    }
}

- (void)setupForWriteLogFileForApp
{
    //  create folder each day
    NSString *directory = [NSString stringWithFormat:@"%@/%@", logsFolderName, [AppUtils getCurrentDateForLogFolder]];
    [AppUtils createDirectoryAndSubDirectory:directory];
    
    [DDLog addLogger:[DDASLLogger sharedInstance]];
    [DDLog addLogger:[DDTTYLogger sharedInstance]];
    
    //  set logs file path
    NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDir = [documentPaths objectAtIndex:0];
    
    NSString *logFilePath = [documentsDir stringByAppendingPathComponent:directory];
    
    DDLogFileManagerDefault *documentsFileManager = [[DDLogFileManagerDefault alloc] initWithLogsDirectory:logFilePath];
    DDFileLogger *fileLogger = [[DDFileLogger alloc] initWithLogFileManager:documentsFileManager];
    
    [fileLogger setMaximumFileSize:(1024 * 2 * 1024)];  //  2MB for each log file
    [fileLogger setRollingFrequency:(3600.0 * 24.0)];  // roll everyday
    [[fileLogger logFileManager] setMaximumNumberOfLogFiles:5];
    [fileLogger setLogFormatter:[[DDLogFileFormatterDefault alloc]init]];
    
    [DDLog addLogger:fileLogger];
}

- (void)createErrorMessagesInfo {
    errorMsgDict = [[NSMutableDictionary alloc] init];
    
    [errorMsgDict setObject:@"Truy váº¥n khÃ´ng há»£p lá»" forKey:@"001"];
    [errorMsgDict setObject:@"Thiáº¿u tÃªn truy cáº­p hoáº·c máº­t kháº©u" forKey:@"002"];
    [errorMsgDict setObject:@"TÃªn truy cáº­p khÃ´ng tá»n táº¡i trÃªn há» thá»ng" forKey:@"003"];
    [errorMsgDict setObject:@"Máº­t kháº©u khÃ´ng chÃ­nh xÃ¡c" forKey:@"004"];
    [errorMsgDict setObject:@"TÃ i khoáº£n chÆ°a ÄÆ°á»£c kÃ­ch hoáº¡t" forKey:@"005"];
    [errorMsgDict setObject:@"TÃ i khoáº£n Äang bá» khÃ³a" forKey:@"006"];
    [errorMsgDict setObject:@"TÃ i khoáº£n thiáº¿u thÃ´ng tin cÃ¡ nhÃ¢n hay chá»§ thá»" forKey:@"007"];
    [errorMsgDict setObject:@"Há» sÆ¡ cáº§n thÃªm nháº­p thiáº¿u tÃªn hoáº·c CMND hoáº·c sá» Äiá»n thoáº¡i" forKey:@"008"];
    [errorMsgDict setObject:@"TÃªn chá»§ thá» pháº£i lÃ  tiáº¿ng Viá»t cÃ³ dáº¥u" forKey:@"009"];
    [errorMsgDict setObject:@"Sá» Äiá»n thoáº¡i khÃ´ng há»£p lá»" forKey:@"010"];
    [errorMsgDict setObject:@"Há» sÆ¡ tá» chá»©c bá» thiáº¿u má»t trong cÃ¡c thÃ´ng tin sau: TÃªn tá» chá»©c, MÃ£ sá» thuáº¿, Äá»a chá», sá» Äiá»n thoáº¡i" forKey:@"011"];
    [errorMsgDict setObject:@"MÃ£ há» sÆ¡ khÃ´ng tá»n táº¡i trÃªn há» thá»ng" forKey:@"012"];
    [errorMsgDict setObject:@"Sá» nÄng ÄÄng kÃ½ hoáº·c duy trÃ¬ khÃ´ng há»£p lá»" forKey:@"013"];
    [errorMsgDict setObject:@"MÃ£ há» sÆ¡ khÃ´ng pháº£i lÃ  há» sÆ¡ cá»§a tÃ i khoáº£n ÄÄng nháº­p" forKey:@"014"];
    [errorMsgDict setObject:@"TÃªn miá»n khÃ´ng á» tráº¡ng thÃ¡i tá»± do Äá» ÄÄng kÃ½" forKey:@"015"];
    [errorMsgDict setObject:@"Sá» tiá»n trong tÃ i khoáº£n khÃ´ng Äá»§ Äá» ÄÄng kÃ½ / duy trÃ¬ tÃªn miá»n" forKey:@"016"];
    [errorMsgDict setObject:@"TÃªn miá»n khÃ´ng há»£p lá» hoáº·c khÃ´ng tá»n táº¡i trÃªn há» thá»ng" forKey:@"017"];
    [errorMsgDict setObject:@"TÃªn miá»n Äang á» cháº¿ Äá» ÄÆ°á»£c báº£o vá», vui lÃ²ng liÃªn nhÃ  cung cáº¥p tÃªn miá»n Äá» ÄÆ°á»£c há» trá»£." forKey:@"018"];
    [errorMsgDict setObject:@"Thiáº¿u thÃ´ng tin NS1" forKey:@"019"];
    [errorMsgDict setObject:@"KhÃ´ng thá» phÃ¢n giáº£i NS1" forKey:@"020"];
    [errorMsgDict setObject:@"Thiáº¿u thÃ´ng tin NS2" forKey:@"021"];
    [errorMsgDict setObject:@"KhÃ´ng thá» phÃ¢n giáº£i NS2" forKey:@"022"];
    [errorMsgDict setObject:@"KhÃ´ng thá» phÃ¢n giáº£i NS3" forKey:@"023"];
    [errorMsgDict setObject:@"KhÃ´ng thá» phÃ¢n giáº£i NS4" forKey:@"024"];
    [errorMsgDict setObject:@"DNS Äang ÄÆ°á»£c cáº­p nháº­t. Vui lÃ²ng cáº­p nháº­t DNS sau." forKey:@"025"];
    [errorMsgDict setObject:@"TÃªn miá»n khÃ´ng tá»n táº¡i trÃªn há» thá»ng" forKey:@"026"];
    [errorMsgDict setObject:@"Máº­t kháº©u pháº£i nhiá»u hÆ¡n 6 kÃ½ tá»±" forKey:@"027"];
    [errorMsgDict setObject:@"Máº­t kháº©u má»i khÃ´ng giá»ng nhau" forKey:@"028"];
    [errorMsgDict setObject:@"Thiáº¿u mÃ£ OTP" forKey:@"029"];
    [errorMsgDict setObject:@"MÃ£ OTP nháº­p vÃ o khÃ´ng chÃ­nh xÃ¡c" forKey:@"030"];
    [errorMsgDict setObject:@"Sá» Äiá»n thoáº¡i khÃ´ng há»£p lá»" forKey:@"031"];
    [errorMsgDict setObject:@"MÃ£ há» sÆ¡ khÃ´ng pháº£i lÃ  há» sÆ¡ cá»§a tÃ i khoáº£n ÄÄng nháº­p" forKey:@"032"];
    [errorMsgDict setObject:@"ThÃ´ng tin tÃ i khoáº£n ngÃ¢n hÃ ng nháº­p vÃ o chÆ°a Äáº§y Äá»§" forKey:@"033"];
    [errorMsgDict setObject:@"MÃ£ ÄÆ¡n hÃ ng khÃ´ng tá»n táº¡i trÃªn há» thá»ng" forKey:@"034"];
    [errorMsgDict setObject:@"Thiáº¿u hÃ¬nh Äáº¡i Äáº¡i diá»n (profile photo)" forKey:@"035"];
    [errorMsgDict setObject:@"CÃ³ lá»i xáº£y ra trong quÃ¡ trÃ¬nh cáº­p nháº­t hÃ¬nh Äáº¡i diá»n" forKey:@"036"];
    [errorMsgDict setObject:@"URL hÃ¬nh Äáº¡i diá»n khÃ´ng há»£p lá»" forKey:@"037"];
    [errorMsgDict setObject:@"ThÃ´ng tin cÃ¢u há»i nháº­p vÃ o chÆ°a Äáº§y Äá»§" forKey:@"038"];
    [errorMsgDict setObject:@"TÃªn truy cáº­p ÄÃ£ tá»n táº¡i trÃªn há» thá»ng" forKey:@"039"];
    [errorMsgDict setObject:@"TÃªn truy cáº­p pháº£i lÃ  Äá»a chá» email" forKey:@"040"];
    [errorMsgDict setObject:@"QuÃ¡ trÃ¬nh ÄÄng kÃ½ Äang bá» giá»i háº¡n, tá»i Äa 3 láº§n ÄÄng kÃ½ trong 60 phÃºt" forKey:@"041"];
    [errorMsgDict setObject:@"Thiáº¿u CMND máº·t trÆ°á»c" forKey:@"042"];
    [errorMsgDict setObject:@"TÃªn miá»n cáº§n tra cá»©u khÃ´ng há»£p lá»" forKey:@"043"];
    [errorMsgDict setObject:@"Sá» tiá»n cáº§n rÃºt lá»n hÆ¡n sá» tiá»n thÆ°á»ng tÃ i khoáº£n Äang cÃ³" forKey:@"044"];
    [errorMsgDict setObject:@"Sá» tiá»n cáº§n rÃºt nhá» hÆ¡n sá» tiá»n tá»i thiá»u cÃ³ thá» rÃºt" forKey:@"045"];
}

#pragma mark - Firebase
- (void)messaging:(FIRMessaging *)messaging didReceiveRegistrationToken:(NSString *)fcmToken {
    [WriteLogsUtils writeLogContent:SFM(@"[%s] fcmToken = %@", __FUNCTION__, fcmToken)];
    token = fcmToken;
}

- (void)startTimerToReloadInfoAfterTopupSuccessful {
    [WriteLogsUtils writeLogContent:SFM(@"[%s]", __FUNCTION__)];
    [self performSelector:@selector(regetLoginInformation) withObject:nil afterDelay:10];
}

- (void)regetLoginInformation {
    [WriteLogsUtils writeLogContent:SFM(@"[%s]", __FUNCTION__)];
    
    [WebServiceUtils getInstance].delegate = self;
    [[WebServiceUtils getInstance] loginWithUsername:USERNAME password:PASSWORD];
    if (getInfoTimer != nil) {
        [getInfoTimer invalidate];
        getInfoTimer = nil;
    }
    countLogin = 1;
    
    NSLog(@"regetLoginInformation after 15s");
    getInfoTimer = [NSTimer scheduledTimerWithTimeInterval:15.0 target:self selector:@selector(tryToRegetLoginInformation) userInfo:nil repeats:TRUE];
}

- (void)tryToRegetLoginInformation {
    [WriteLogsUtils writeLogContent:SFM(@"[%s]", __FUNCTION__)];
    
    if (countLogin >= 6) {
        if (getInfoTimer != nil) {
            [getInfoTimer invalidate];
            getInfoTimer = nil;
        }
        countLogin = 0;
        NSLog(@"countLogin = 6, cancel timer");
        return;
    }
    countLogin++;
    [[WebServiceUtils getInstance] loginWithUsername:USERNAME password:PASSWORD];
}

-(void)loginSucessfulWithData:(NSDictionary *)data {
    [[NSNotificationCenter defaultCenter] postNotificationName:@"reloadBalanceInfo" object:nil];
}

@end
